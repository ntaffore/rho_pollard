/* fichier de test pour avoir les donné du temps*/

/*fichier a charger */
\r rho.gp
\r initiation_courbe.gp

/* verification que la methode rho de pollard en en racine de p */

print("-------------------------------------------------------------------");
print(" n = 10");

/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(10);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#



print("------------------------------------------------------");
print("n = 12");

/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(12);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print(" -----------------------------------------------------------------");
print("n = 14");

/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(14);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("----------------------------------------------------------");
print("n = 16");

/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
/* création de la courbe elliptique */
n = prem_n_bit(16);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print(" -------------------------------------------------------------");
print(" n = 18");

/* création de la courbe elliptique */
n = prem_n_bit(18);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(18);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(18);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(18);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(18);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("-------------------------------------------------------------------------------");
print(" n = 20");

/* création de la courbe elliptique */
n = prem_n_bit(20);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(20);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(20);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(20);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(20);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

print("-----------------------------------------------------------------------")
print("n = 21");

/* création de la courbe elliptique */
n = prem_n_bit(21);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(21);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(21);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(21);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("------------------------------------------------------------------------------")
print("n = 22");

/* création de la courbe elliptique */
n = prem_n_bit(22);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(22);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(22);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(22);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

print("------------------------------------------------------------------------------------------");
print("n = 23");


/* création de la courbe elliptique */
n = prem_n_bit(23);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(23);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(23);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("----------------------------------------------------------------------");
print(" n = 24");

/* création de la courbe elliptique */
n = prem_n_bit(24);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(24);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la courbe elliptique */
n = prem_n_bit(24);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("------------------------------------------------------------------------");
print( "n = 25");

 /* création de la courbe elliptique */
n = prem_n_bit(25);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


 /* création de la courbe elliptique */
n = prem_n_bit(25);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


 /* création de la courbe elliptique */
n = prem_n_bit(25);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("--------------------------------------------------------------------------------");
print("n = 26");

 /* création de la courbe elliptique */
n = prem_n_bit(26);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(26);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


 /* création de la courbe elliptique */
n = prem_n_bit(26);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("-----------------------------------------------------------------------------------------");
print("n = 27");

 /* création de la courbe elliptique */
n = prem_n_bit(27);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(27);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(27);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#




print("---------------------------------------------------------------------------");
print("n = 28");

 /* création de la courbe elliptique */
n = prem_n_bit(28);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(28);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(28);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("----------------------------------------------------------------------------------------");
print("n = 29);

 /* création de la courbe elliptique */
n = prem_n_bit(29);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(29);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(29);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#



print("-------------------------------------------------------------------------------")
print("n = 30");

 /* création de la courbe elliptique */
n = prem_n_bit(30);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(30);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

 /* création de la courbe elliptique */
n = prem_n_bit(30);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

print("--------------------------------------------------------------------------------------------------------");
print("n=31");

 /* création de la courbe elliptique */
n = prem_n_bit(31);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* création de la coureb ell */
n = prem_n_bit(31);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(31);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("------------------------------------------------------------------------------------------------");
print("n = 32");

/* creation de la courbe ell */
n = prem_n_bit(32);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(32);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* cretion  de la courbe ell */
n = prem_n_bit(32);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("-----------------------------------------------------------------------------------------------");
print("n = 33");

/* creationde la courbe ell */
n = prem_n_bit(33);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(33);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(33);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

print("-------------------------------------------------------------------------------------");
print("n = 34 ");

/* creation de la courbe ell */
n = prem_n_bit(34);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(34);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(34);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("------------------------------------------------------------------------------------------------------------");
print("n = 35");

/* creation de la courbe ell */
n = prem_n_bit(35);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(35);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(35);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("----------------------------------------------------------------------------------------");
print("n = 36");

/* creation de la courbe ell */
n = prem_n_bit(36);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(36);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(36)
;E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#



print("-------------------------------------------------------------------------------------------------");
print("n = 37");

/* creation de la courbe ell */
n = prem_n_bit(37);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(37);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(37)
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("---------------------------------------------------------------------------------------------------");
print("n = 38");

/* creation de la courbe ell */
n = prem_n_bit(38);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


/* creation de la courbe ell */
n = prem_n_bit(38);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(38);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#


print("------------------------------------------------------------------------------------");
print("n = 39");

/* creation de courbe ell */
n = prem_n_bit(39);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(39);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(39);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

print("-------------------------------------------------------------------------------------------------");
print("n = 40");

/* creation  de la courbe ell */
n = prem_n_bit(40);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(40);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#

/* creation de la courbe ell */
n = prem_n_bit(40);
E = courbe_ell_Fp(n);

/* prise d'un point aleatoire sur E */
P = random_point_curve(E);
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
pow = random(n);
print([n,pow]);
Q = ellpow(E,P,pow);

/* demarage du compteur temps */
#
pow_exp = rho_p_V5(E,P,Q);

/* fin du temp */
#
